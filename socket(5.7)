#include<netinet/in.h>
#host bytes change net bytes
unsigned short int htons(unsigned short int hostshort)
#net bytes change host bytes
unsigned short int ntohs(unsiged short int netshort)


#socket local structure
struct sockaddr_in
{
  sa_family_t sin_family;  //local: AF_INET
  u_int16_t sin_port      //port number, net bytes 
  struct in_adde sin_addr //IPv4 local structure ,u_int32_ts_addr
}

#IP change function

#include<arpa/inet.h>
//string IP change int IP
int inet_pton(int af, const char* src,void* dst);  //af is IP success return 1
                                                              fail return 0
                                                     dst is safe local
//int IP change string IP
const char* inet_ntop(int af,const void* dst,socklen_t cnt)


#create socket
#include<sys/types>
#include<sys/socket.h>

/*
domain: down protocol type
type:point serve type
protocol
*/
int socket(int domain,int type, int protocol)

//main function
int bind(int sockfd,const struct sockeaddr* addr,socketlen_t addrlen);
int listen(int sockfd, int backlog) 
int accept(int sockfd,struct sockaddr* addr,socklen_t* addrlen) 
int connect(int sockfd,const struct sockaddr* serv_addr,socklen_t addrlen)
// connect and bind and listen success return 0 ,fail return -1
int close(int fd);
int shutdown(int sockfd,int howto) 
howto: SHUT_RE //close read halt
       SHUT_WR //close write halt
       SHUT_RDWR://smae time close read and write
ssize_t recv(int sockfd,void* but,size_t len,int flags)
ssize_t sned(int sockfd,cons void* but,size_t len,int flags)
flags:MSG_WAITALL:read mount 
      MSG_PEEK:search buf data but not extrect
#UDP data read write API:
ssize_t recvfrom()
ssize_t sendto()











